class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        len_1 = len(nums1)
        len_2 = len(nums2)
        if len_1 > len_2:
            return self.findMedianSortedArrays(nums2, nums1)
        total_len = len_1 + len_2
        low = 0
        high = len_1
        main_mid = (total_len + 1) // 2
        while low <= high:
            mid1 = low + (high - low) // 2
            mid2 = main_mid - mid1
            l1, l2 = float(-inf), float(-inf)
            r1, r2 = float(inf), float(inf)
            # we set rs and mids and ls and mids - 1s
            if mid1 < len_1:
                r1 = nums1[mid1]
            if mid2 < len_2:
                r2 = nums2[mid2]
            if mid1 - 1 >= 0:
                l1 = nums1[mid1-1]
            if mid2 - 1 >= 0:
                l2 = nums2[mid2-1]
            if l1 <= r2 and l2 <= r1:
                # if odd total length
                if total_len % 2 == 1:
                    return max(l1, l2)
                else:
                    return (max(l1, l2) + min(r1, r2)) / 2
            elif l1 > r2:
                high = mid1 - 1
            else:
                low = mid1 + 1
        return
# TC - O(log m + n)
# SC - O(1)
